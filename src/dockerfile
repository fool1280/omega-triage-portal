#FROM nginx:alpine
#COPY .. /usr/share/nginx/html
#COPY ./site/ /usr/share/nginx/html/

# syntax=docker/dockerfile:1
FROM python:3.8-alpine3.17
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# [Choice] Node.js version: none, lts/*, 16, 14, 12, 10
ARG NODE_VERSION="none"
RUN if [ "${NODE_VERSION}" != "none" ]; then su vscode -c "umask 0002 && . /usr/local/share/nvm/nvm.sh && nvm install ${NODE_VERSION} 2>&1"; fi

# Install OSS Gadget
# License: MIT
ARG OSSGADGET_VERSION="0.1.307"
RUN cd /opt && \
    wget -q https://github.com/microsoft/OSSGadget/releases/download/v${OSSGADGET_VERSION}/OSSGadget_linux_${OSSGADGET_VERSION}.tar.gz -O OSSGadget.tar.gz && \
    tar zxvf OSSGadget.tar.gz && \
    rm OSSGadget.tar.gz && \
    mv OSSGadget_linux_${OSSGADGET_VERSION} OSSGadget


RUN apk update && apk add python3-dev \
                        gcc \
                        libc-dev \
                        postgresql-dev \
                        musl-dev  \
                        libffi-dev \
                        libmagic

WORKDIR /app
COPY requirements.txt .
RUN mkdir .env
RUN mkdir /data
RUN mkdir /logs
RUN touch /logs/database.log
RUN pip install --upgrade pip
RUN pip install -r requirements.txt
#RUN pip install --no-cache-dir -r requirements.txt
COPY . /app/
#COPY world.sql /docker-entrypoint-initdb.d/

EXPOSE 8001

CMD ["python", "manage.py", "runserver", "0.0.0.0:8001"]
